import tensorflow as tf
from tensorflow import keras
import numpy as np
import matplotlib.pyplot as plt

# ğŸ“Œ 1. Veri Setini YÃ¼kleyelim (MNIST - El YazÄ±sÄ± Rakamlar)
mnist = keras.datasets.mnist
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# ğŸ“Œ 2. Veriyi NormalleÅŸtirelim (0-255 arasÄ± deÄŸeri 0-1 arasÄ±na Ã§ekiyoruz)
X_train, X_test = X_train / 255.0, X_test / 255.0

# ğŸ“Œ 3. Sinir AÄŸÄ± Modelimizi OluÅŸturalÄ±m
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),  # 28x28'lik resmi dÃ¼z hale getiriyoruz
    keras.layers.Dense(128, activation='relu'),  # 128 nÃ¶ronlu gizli katman (ReLU aktivasyonu)
    keras.layers.Dense(10, activation='softmax')  # 10 sÄ±nÄ±f (0-9 arasÄ± rakamlar)
])

# ğŸ“Œ 4. Modeli Derleyelim
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# ğŸ“Œ 5. Modeli EÄŸitelim (5 Epoch - 5 Tur Ã–ÄŸrenme)
model.fit(X_train, y_train, epochs=5)

# ğŸ“Œ 6. Modeli Test Edelim
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"\nğŸ“Œ Test DoÄŸruluÄŸu: {test_acc:.2%}")

# ğŸ“Œ 7. Modelin Tahminlerini GÃ¶sterelim
predictions = model.predict(X_test)

# ğŸ“Œ 8. Ä°lk 5 Tahmini GÃ¶rselleÅŸtirelim
for i in range(5):
    plt.imshow(X_test[i], cmap="gray")
    plt.title(f"Tahmin: {np.argmax(predictions[i])}, GerÃ§ek: {y_test[i]}")
    plt.show()
